/**
 * Modal espec√≠fico para alerta de fim de per√≠odo de foco
 * Aparece ap√≥s 45 minutos de codifica√ß√£o cont√≠nua
 */

import { ModalManager } from '../modules/modal';
import { PomodoroManager } from '../modules/pomodoro';
import * as vscode from 'vscode';

export interface FocusCompleteModalOptions {
    focusDuration: number;      // Dura√ß√£o do foco em minutos
    canContinue: boolean;       // Se pode continuar por mais tempo
    continueMinutes: number;    // Quantos minutos extras pode continuar
}

export class FocusCompleteModal {
    private static instance: FocusCompleteModal | null = null;
    private modalManager: ModalManager;
    private pomodoroManager: PomodoroManager | null = null;
    private currentModalId: string | null = null;

    private constructor() {
        this.modalManager = ModalManager.getInstance();
    }

    public static getInstance(): FocusCompleteModal {
        if (!FocusCompleteModal.instance) {
            FocusCompleteModal.instance = new FocusCompleteModal();
        }
        return FocusCompleteModal.instance;
    }

    /**
     * Inicializa com refer√™ncia ao PomodoroManager
     */
    public initialize(pomodoroManager: PomodoroManager): void {
        this.pomodoroManager = pomodoroManager;
    }

    /**
     * Exibe o modal de alerta de fim de foco
     */
    public async showFocusCompleteAlert(options: FocusCompleteModalOptions): Promise<void> {
        // Se j√° h√° um modal ativo, n√£o abre outro
        if (this.currentModalId && this.modalManager.isModalActive(this.currentModalId)) {
            return;
        }

        const modalId = 'focus-complete-alert';
        this.currentModalId = modalId;

        // Reproduzir som de alerta
        await this.playAlertSound();

        const content = this.generateModalContent(options);

        await this.modalManager.showModal({
            id: modalId,
            title: 'üîî Hora de uma pausa!',
            content: content,
            width: '600px',
            height: '550px',
            className: 'modal-focus-alert',
            closable: false, // For√ßar usu√°rio a escolher uma op√ß√£o
            buttons: [
                {
                    id: 'take-break',
                    text: 'üßò Relaxar agora (15 min)',
                    className: 'modal-button primary break-button',
                    onClick: () => this.handleTakeBreak()
                },
                {
                    id: 'continue-focus',
                    text: `‚è∞ Continuar por mais ${options.continueMinutes} min`,
                    className: 'modal-button secondary continue-button',
                    onClick: () => this.handleContinueFocus(options.continueMinutes)
                },
                {
                    id: 'open-settings',
                    text: '‚öôÔ∏è Configura√ß√µes',
                    className: 'modal-button tertiary settings-button',
                    onClick: () => this.handleOpenSettings()
                }
            ]
        }, {
            onShow: () => {
                // Fazer blink no status bar para chamar aten√ß√£o
                this.startStatusBarBlink();
            },
            onDestroy: () => {
                this.currentModalId = null;
                this.stopStatusBarBlink();
            }
        });
    }

    /**
     * Gera o conte√∫do HTML do modal
     */
    private generateModalContent(options: FocusCompleteModalOptions): string {
        const focusTime = this.formatDuration(options.focusDuration);
        
        return `
            <div class="focus-alert-container">
                <div class="alert-icon">
                    <span class="icon-large">‚è∞</span>
                </div>
                
                <div class="alert-message">
                    <h2>Excelente foco!</h2>
                    <p class="focus-duration">Voc√™ codificou por <strong>${focusTime}</strong> consecutivos</p>
                    <p class="recommendation">
                        Para manter sua produtividade e sa√∫de, recomendamos uma pausa de 15 minutos.
                    </p>
                </div>

                <div class="benefits-section">
                    <h3>üß† Benef√≠cios da pausa:</h3>
                    <ul class="benefits-list">
                        <li>Descansa os olhos e previne fadiga visual</li>
                        <li>Melhora a criatividade e resolu√ß√£o de problemas</li>
                        <li>Aumenta o foco para a pr√≥xima sess√£o</li>
                        <li>Reduz o estresse e melhora o bem-estar</li>
                    </ul>
                </div>

                <div class="action-prompt">
                    <p><strong>O que voc√™ gostaria de fazer?</strong></p>
                </div>
                
                <div style="margin-top: 30px;"></div>
            </div>
        `;
    }

    /**
     * A√ß√£o: Iniciar pausa de 15 minutos
     */
    private async handleTakeBreak(): Promise<void> {
        if (!this.pomodoroManager) {
            vscode.window.showErrorMessage('PomodoroManager n√£o inicializado');
            return;
        }

        try {
            await this.pomodoroManager.startBreakSession('short');
            this.closeModal();
            
            // Mostrar notifica√ß√£o de confirma√ß√£o
            vscode.window.showInformationMessage(
                '‚úÖ Pausa iniciada! Relaxe por 15 minutos. Voc√™ merece! üòå'
            );

            // Opcional: Abrir sugest√µes de atividades para a pausa
            this.showBreakSuggestions();

        } catch (error) {
            console.error('Erro ao iniciar pausa:', error);
            vscode.window.showErrorMessage('Erro ao iniciar pausa. Tente novamente.');
        }
    }

    /**
     * A√ß√£o: Continuar foco por mais X minutos
     */
    private async handleContinueFocus(extraMinutes: number): Promise<void> {
        if (!this.pomodoroManager) {
            vscode.window.showErrorMessage('PomodoroManager n√£o inicializado');
            return;
        }

        try {
            await this.pomodoroManager.extendFocus(extraMinutes);
            this.closeModal();
            
            vscode.window.showInformationMessage(
                `‚è±Ô∏è Foco estendido por mais ${extraMinutes} minutos. Mantenha o ritmo! üí™`
            );

        } catch (error) {
            console.error('Erro ao estender foco:', error);
            vscode.window.showErrorMessage('Erro ao estender tempo de foco. Tente novamente.');
        }
    }

    /**
     * A√ß√£o: Abrir configura√ß√µes do Pomodoro
     */
    private async handleOpenSettings(): Promise<void> {
        try {
            // Fechar modal atual
            this.closeModal();
            
            // Abrir configura√ß√µes via comando VSCode
            await vscode.commands.executeCommand('my-time-trace-vscode.showPomodoroConfig');
            
        } catch (error) {
            console.error('Erro ao abrir configura√ß√µes:', error);
            // Se comando n√£o existir, mostrar mensagem informativa
            vscode.window.showInformationMessage(
                '‚öôÔ∏è Configura√ß√µes do Pomodoro em desenvolvimento. Use as configura√ß√µes do VSCode por enquanto.',
                'Abrir Configura√ß√µes VSCode'
            ).then(selection => {
                if (selection === 'Abrir Configura√ß√µes VSCode') {
                    vscode.commands.executeCommand('workbench.action.openSettings', 'myTimeTraceVSCode');
                }
            });
        }
    }

    /**
     * Reproduz som de alerta
     */
    private async playAlertSound(): Promise<void> {
        try {
            // Usar API nativa do VSCode para reproduzir som
            // Nota: VSCode n√£o tem API de √°udio nativa, mas podemos usar HTML5 Audio no webview
            console.log('üîä Reproduzindo som de alerta...');
            
            // Implementar som via webview HTML5 audio na pr√≥xima sub-tarefa
            
        } catch (error) {
            console.error('Erro ao reproduzir som:', error);
        }
    }

    /**
     * Inicia efeito visual de alerta (usando notifica√ß√µes VSCode)
     */
    private statusBarBlinkInterval: NodeJS.Timeout | null = null;

    private startStatusBarBlink(): void {
        // Usar notifica√ß√µes do VSCode para chamar aten√ß√£o
        let blinkCount = 0;
        this.statusBarBlinkInterval = setInterval(() => {
            if (blinkCount < 6) { // Blink por 6 vezes (3 segundos)
                const message = blinkCount % 2 === 0 ? 
                    'üî¥ Hora de uma pausa!' : 
                    '‚è∞ 45 minutos de foco completos';
                
                // N√£o usar showInformationMessage para n√£o spam
                console.log(`Status blink: ${message}`);
                blinkCount++;
            } else {
                this.stopStatusBarBlink();
            }
        }, 500);
    }

    private stopStatusBarBlink(): void {
        if (this.statusBarBlinkInterval) {
            clearInterval(this.statusBarBlinkInterval);
            this.statusBarBlinkInterval = null;
        }
    }

    /**
     * Mostra sugest√µes de atividades para a pausa
     */
    private showBreakSuggestions(): void {
        const suggestions = [
            'üö∂ Fa√ßa uma caminhada r√°pida',
            'üíß Beba um copo d\'√°gua',
            'üßò Pratique respira√ß√£o profunda',
            'üëÅÔ∏è Olhe para longe por 30 segundos',
            'ü§∏ Fa√ßa alongamentos simples',
            '‚òï Prepare um caf√© ou ch√°',
            'üå± Regue suas plantas',
            'üì± Verifique mensagens importantes'
        ];

        const randomSuggestion = suggestions[Math.floor(Math.random() * suggestions.length)];
        
        setTimeout(() => {
            vscode.window.showInformationMessage(
                `üí° Sugest√£o para sua pausa: ${randomSuggestion}`,
                'OK', 'Mais sugest√µes'
            ).then(selection => {
                if (selection === 'Mais sugest√µes') {
                    this.showBreakSuggestions();
                }
            });
        }, 2000);
    }

    /**
     * Fecha o modal atual
     */
    private closeModal(): void {
        if (this.currentModalId) {
            this.modalManager.closeModal(this.currentModalId);
            this.currentModalId = null;
        }
    }

    /**
     * Formata dura√ß√£o em minutos para string leg√≠vel
     */
    private formatDuration(minutes: number): string {
        if (minutes < 60) {
            return `${minutes} minutos`;
        }
        
        const hours = Math.floor(minutes / 60);
        const remainingMinutes = minutes % 60;
        
        if (remainingMinutes === 0) {
            return `${hours} ${hours === 1 ? 'hora' : 'horas'}`;
        }
        
        return `${hours}h ${remainingMinutes}min`;
    }

    /**
     * Verifica se o modal est√° atualmente ativo
     */
    public isActive(): boolean {
        return this.currentModalId !== null && 
               this.modalManager.isModalActive(this.currentModalId);
    }

    /**
     * For√ßa fechamento do modal (para casos de emerg√™ncia)
     */
    public forceClose(): void {
        this.closeModal();
        this.stopStatusBarBlink();
    }
}